version = "0.1"
group = "com.demo.book"

micronaut {
    runtime("netty")
    testRuntime("kotest")
    processing {
        incremental(true)
        annotations("com.demo.book.*")
    }
}

sourceSets.main.kotlin.srcDirs += "src/main/gen"

dependencies {
    kapt("io.micronaut:micronaut-http-validation")
    implementation "io.micronaut:micronaut-http-client"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut.kotlin:micronaut-kotlin-runtime"
    implementation "io.micronaut.liquibase:micronaut-liquibase"
    implementation "javax.annotation:javax.annotation-api"
    implementation "org.jetbrains.kotlin:kotlin-reflect:${kotlinVersion}"
    implementation("javax.inject:javax.inject:1")
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:${kotlinVersion}"
    implementation "io.micronaut:micronaut-validation"
    implementation 'com.medly:ktee:1.0.0'
    implementation("io.micronaut.security:micronaut-security-annotations")
    implementation("io.micronaut.security:micronaut-security-jwt")
    implementation 'dev.medly:auth-token:0.0.3'
    runtimeOnly "ch.qos.logback:logback-classic"
    runtimeOnly "com.fasterxml.jackson.module:jackson-module-kotlin"

    testImplementation 'io.projectreactor:reactor-core:3.4.18'
    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin"
    testImplementation "io.mockk:mockk:1.10.2"
    testImplementation "org.testcontainers:testcontainers"
    testImplementation "com.medly.norm:runtime:$normVersion"
    testImplementation "com.fasterxml.jackson.module:jackson-module-kotlin"

}


application {
    mainClass.set("com.demo.book.ApplicationKt")
}

tasks {
    jacocoTestReport {
        dependsOn test // tests are required to run before generating the report
        reports {
            xml.enabled false
            csv.enabled false
            html.destination layout.buildDirectory.dir('jacocoHtml').get().asFile
        }
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                limit {
                    minimum = 0.8
                }
            }
        }
    }
    check.dependsOn jacocoTestCoverageVerification

    dockerBuild {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }

    dockerBuildNative {
        images = ["${System.env.DOCKER_IMAGE ?: project.name}:$project.version"]
    }
}

test {
    useJUnitPlatform()

    testLogging {
        events "PASSED", "FAILED", "SKIPPED"
        exceptionFormat "full"
    }
}

compileKotlin {
    kotlinOptions {
        jvmTarget = '11'
        //Will retain parameter names for Java reflection
        javaParameters = true
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = '11'
        javaParameters = true
    }
}

norm {
    jdbcUrl = "jdbc:postgresql://localhost:5433/bmt_db"
    username = "postgres"
    password = ""
    inputDir = file("src/main/sql")
    outDir = file("src/main/gen")
    basePath = file("src/main/kotlin/com/demo/book")
}

task buildWithLint(dependsOn: ['build', 'ktlintCheck'])

task stage(dependsOn: ['assemble', 'clean'])

assemble.mustRunAfter clean
